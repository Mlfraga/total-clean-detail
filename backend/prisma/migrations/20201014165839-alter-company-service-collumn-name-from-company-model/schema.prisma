// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  SELLER
  MANAGER
  ADMIN
}

enum Status {
  PENDING
  CONFIRMED
  CANCELED
  FINISHED
}

enum Source {
  NEW
  USED
  WORKSHOP
}

model User {
  id         Int     @id @default(autoincrement())
  username   String  @unique
  email      String  @unique
  password   String
  role       Role    @default(SELLER)
  enabled    Boolean @default(true)
  firstLogin Boolean @default(true)
  profile    Profile
}

model Profile {
  id        Int      @id @default(autoincrement())
  name      String
  telephone String
  enabled   Boolean  @default(true)
  userId    Int      @unique
  companyId Int?
  unitId    Int?
  user      User     @relation(fields: [userId], references: [id])
  company   Company? @relation(fields: [companyId], references: [id])
  unit      Unit?    @relation(fields: [unitId], references: [id])
  sale      Sale[]
}

model Company {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  telephone      String
  cnpj           String           @unique
  units          Unit[]
  Profile        Profile[]
  companyService CompanyService[]
}

model Unit {
  id        Int       @id @default(autoincrement())
  name      String
  telephone String
  companyId Int
  company   Company   @relation(fields: [companyId], references: [id])
  Profile   Profile[]
}

model Service {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  price          Float
  enabled        Boolean          @default(true)
  CompanyService CompanyService[]
  serviceSale    ServiceSale[]
}

model CompanyService {
  id        Int     @id @default(autoincrement())
  price     Float
  companyId Int
  serviceId Int
  company   Company @relation(fields: [companyId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])
}

model Person {
  id    Int    @id @default(autoincrement())
  cpf   String @unique
  name  String
  cars  Car[]
  sales Sale[]
}

model Car {
  id       Int     @id @default(autoincrement())
  car      String
  carPlate String
  carColor String
  carModel String?
  personId Int
  person   Person  @relation(fields: [personId], references: [id])
  sale     Sale[]
}

model Sale {
  id               Int           @id @default(autoincrement())
  requestDate      DateTime      @default(now())
  availabilityDate DateTime
  deliveryDate     DateTime
  status           Status        @default(PENDING)
  companyPrice     Float
  costPrice        Float
  source           Source        @default(WORKSHOP)
  sellerId         Int
  personId         Int
  carId            Int
  seller           Profile       @relation(fields: [sellerId], references: [id])
  person           Person        @relation(fields: [personId], references: [id])
  car              Car           @relation(fields: [carId], references: [id])
  serviceSale      ServiceSale[]
}

model ServiceSale {
  id        Int     @id @default(autoincrement())
  saleId    Int
  serviceId Int
  sale      Sale    @relation(fields: [saleId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])
}
